
const TerserPlugin = require('terser-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const HTMLWebpackInlinePlugin = require('./HTMLWebpackInlinePlugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')

module.exports = (env, argv) => {
	const dir = process.cwd()

    if (argv.mode === "production") {
        const fs = require('fs-extra')
        fs.emptyDirSync("build/")
        fs.copySync("app/public/", "build/", { dereference: true })
        console.log("> Deploying your app to /build")
	}
    
    return [{
        entry: dir + "/app/index.js",
        output: {
            path: dir + "/build",
			filename: "bundle.js",
			publicPath: "/"
		},
		plugins: [
			new HtmlWebpackPlugin({
				template: dir + '/app/public/index.html',
				minify: false,
				inject: 'head'
			})
		].concat(argv.mode === "production" ? [
			new HTMLWebpackInlinePlugin(HtmlWebpackPlugin, [/.js/]),
			new CleanWebpackPlugin({
				protectWebpackAssets: false,
				cleanOnceBeforeBuildPatterns: [],
				cleanAfterEveryBuildPatterns: ['bundle.js']
			})
		] : []),
        optimization: {
			minimizer: [
				new TerserPlugin({
					terserOptions: {
						keep_fnames: true,
						keep_classnames: true
					}
				})
			]
		},
        devServer: {
			host: "0.0.0.0",
			port: 8080,
			contentBase: [dir + "/app/public"],
			watchOptions: { ignored: dir + "/node_modules" },
			historyApiFallback: true,
			disableHostCheck: true,
			hot: true,
			open: true,
			quiet: true,
			clientLogLevel: "error",
			proxy: {
				"*": {
					bypass: function(req, res, proxyOptions) {
						res.setHeader("Cache-Control", "public, max-age=86000, immutable")
						return req.url
					}
				}
			}
		},
        module: {
            rules: [
                {
                    test: /\.js$/,
                    include: [
                        /app/,
                        /node_modules\/\@penthouse\/psystem/,
						/PSystem.*\.js$/,
					],
                    use: {
                        loader: 'babel-loader',
                        options: {
                            presets: ["@babel/preset-env"],
                            plugins: [
								"@babel/plugin-proposal-class-properties", 
								"@babel/plugin-transform-runtime"
							]
                        }
                    }
                },
                {
                    test: /\.s?css$/,
                    use: [
						"style-loader", 
						"css-loader", 
						{ loader: 'postcss-loader', options: { config: { path: __dirname } } },
						"sass-loader", 
					]
                }
            ]
        },
    }]
}
